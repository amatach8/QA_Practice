{
	"info": {
		"_postman_id": "a8b32d23-897b-49e0-a2ca-f6d006494043",
		"name": "NB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Приходящий токен необходимо передать во все остальные запросы.\r",
							"pm.test(\"Set variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"token\", jsonData.token);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Li",
							"type": "text"
						},
						{
							"key": "passwod",
							"value": "Li123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе. Cхема написана вручную.\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"\t\t\"properties\": \r",
							"\t\t\t{\"person\":\r",
							"\t\t\t\t{\"type\": \"object\",\r",
							"\t\t\t\t\t\"properties\": {\r",
							"\t\t\t\t\t\t\"u_age\": {\"type\": \"integer\"},\r",
							"\t\t\t\t\t\t\"u_name\": {\"type\": \"array\",\r",
							"\t\t\t\t\t\t\t\"items\": [\r",
							"\t\t\t\t\t\t\t\t{\r",
							"\t\t\t\t\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t\t\t\t\t},\r",
							"\t\t\t\t\t\t\t\t{\r",
							"\t\t\t\t\t\t\t\t\t\"type\": \"integer\"\r",
							"\t\t\t\t\t\t\t\t},\r",
							"\t\t\t\t\t\t\t\t{\r",
							"\t\t\t\t\t\t\t\t\t\"type\": \"integer\"\r",
							"\t\t\t\t\t\t\t\t}\r",
							"\t\t\t\t\t\t\t]\r",
							"\t\t\t\t\t\t},\r",
							"\t\t\t\t\t\t\"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t},\r",
							"\t\t\t\"qa_salary_after_12_months\": {\"type\": \"integer\"},\r",
							"\t\t\t\"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"\t\t\t\"start_qa_salary\": {\"type\": \"integer\"}\r",
							"\t\t\t},\r",
							"\t\t\t\"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"]\r",
							"\t\t\t}\r",
							"\r",
							"pm.test(\"Validating schema\", () => {     //вручную\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"pm.test('Schema is valid', function () {  //через сниппет\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"    \r",
							"});\r",
							"\r",
							"//Проверка правильности результата перемножения на коэффициент\r",
							"pm.test('Salary coefficient', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.start_qa_salary*2);\r",
							"})\r",
							"\r",
							"pm.test(\"Y_salary_1_5_year\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"salary1.5\", jsonData.person.u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "50",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Li",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе. Схема написана вручную.\r",
							"let schema = {\r",
							"   \"type\": \"object\",\r",
							"\t\t\"properties\": \r",
							"\t\t\t{\"age\": {\"type\": \"integer\"},\r",
							"\t\t\t\"name\": {\"type\": \"string\"},\r",
							"\t\t\t\"salary\": {\"type\": \"array\",\r",
							"\t\t\t\t\t\t\t\"items\": [\r",
							"\t\t\t\t\t\t\t\t{\r",
							"\t\t\t\t\t\t\t\t\t\"type\": \"integer\"\r",
							"\t\t\t\t\t\t\t\t},\r",
							"\t\t\t\t\t\t\t\t{\r",
							"\t\t\t\t\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t\t\t\t\t},\r",
							"\t\t\t\t\t\t\t\t{\r",
							"\t\t\t\t\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t\t\t\t\t}\r",
							"\t\t\t\t\t\t\t]\r",
							"\t\t\t\t\t\t},\t\r",
							"\t\t\t},\r",
							"\t\t\t\"required\": [\"age\", \"name\", \"salary\"]\r",
							"\t\t\t}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//Проверка правильности результата перемножения на коэффициент.\r",
							"pm.test('Salary coefficient', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    let salary1 = +(jsonData.salary[1]);\r",
							"    let salary2 = +(jsonData.salary[2]);\r",
							"    pm.expect(salary1).to.eql(jsonData.salary[0]*2);\r",
							"    pm.expect(salary2).to.eql(jsonData.salary[0]*3);\r",
							"})\r",
							"\r",
							"//Проверить, что 2-й элемент массива salary больше 1-го и 0-го.\r",
							"pm.test('Сomparison', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    let salary1 = +(jsonData.salary[1]);\r",
							"    let salary2 = +(jsonData.salary[2]);\r",
							"    pm.expect(salary2>salary1).to.be.true;\r",
							"});\r",
							"\r",
							"//Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://116.203.27.46:5002/get_test_user\r",
							"\r",
							"let sal = +(pm.environment.get(\"salary1.5\"))\r",
							"\r",
							"const options = {\r",
							"  method: 'POST',\r",
							"  url: 'http://116.203.27.46:5002/get_test_user',\r",
							"  body: {\r",
							"    mode: 'formdata',\r",
							"    formdata: [\r",
							"        {key:'salary', value: sal},\r",
							"        {key:'auth_token', value: pm.environment.get('token')}\r",
							"  ]}\r",
							"  };\r",
							"    //  * отправляем запрос и сравниваем salary из body нового ответа с передаваемой переменной sal (это наше 'u_salary_1.5_year' )\r",
							"pm.sendRequest(options, function (error, response) {\r",
							"   pm.test('New data', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(response.json().salary).to.eql(sal);\r",
							"    });\r",
							"    console.log(response.json().salary);\r",
							"  }\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "50",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Li",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе. Схема составлена с помощью JSONschema.net.\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"The root schema\",\r",
							"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
							"    \"default\": {},\r",
							"    \"examples\": [\r",
							"        {\r",
							"            \"age\": 50,\r",
							"            \"daily_food\": 0.6,\r",
							"            \"daily_sleep\": 125.0,\r",
							"            \"name\": \"Li\"\r",
							"        }\r",
							"    ],\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"$id\": \"#/properties/age\",\r",
							"            \"type\": \"integer\",\r",
							"            \"title\": \"The age schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                50\r",
							"            ]\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"$id\": \"#/properties/daily_food\",\r",
							"            \"type\": \"number\",\r",
							"            \"title\": \"The daily_food schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0.0,\r",
							"            \"examples\": [\r",
							"                0.6\r",
							"            ]\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"$id\": \"#/properties/daily_sleep\",\r",
							"            \"type\": \"number\",\r",
							"            \"title\": \"The daily_sleep schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0.0,\r",
							"            \"examples\": [\r",
							"                125.0\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"$id\": \"#/properties/name\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The name schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"Li\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//Проверка правильности результата перемножения на коэффициент (для weight).\r",
							"pm.test('Weight coefficient', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    let weightW = pm.request.body.formdata.get(\"weight\")\r",
							"    console.log (weightW)\r",
							"    pm.expect(jsonData.daily_food).to.eql(weightW*0.012);\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(weightW*2.5);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "50",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "50",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Li",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе. Схема составлена с помощью JSONschema.net.\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"The root schema\",\r",
							"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
							"    \"default\": {},\r",
							"    \"examples\": [\r",
							"        {\r",
							"            \"age\": \"50\",\r",
							"            \"family\": {\r",
							"                \"children\": [\r",
							"                    [\r",
							"                        \"Alex\",\r",
							"                        24\r",
							"                    ],\r",
							"                    [\r",
							"                        \"Kate\",\r",
							"                        12\r",
							"                    ]\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 4000\r",
							"            },\r",
							"            \"name\": \"Li\",\r",
							"            \"salary\": 1000\r",
							"        }\r",
							"    ],\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"$id\": \"#/properties/age\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The age schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"50\"\r",
							"            ]\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"$id\": \"#/properties/family\",\r",
							"            \"type\": \"object\",\r",
							"            \"title\": \"The family schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": {},\r",
							"            \"examples\": [\r",
							"                {\r",
							"                    \"children\": [\r",
							"                        [\r",
							"                            \"Alex\",\r",
							"                            24\r",
							"                        ],\r",
							"                        [\r",
							"                            \"Kate\",\r",
							"                            12\r",
							"                        ]\r",
							"                    ],\r",
							"                    \"u_salary_1_5_year\": 4000\r",
							"                }\r",
							"            ],\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"$id\": \"#/properties/family/properties/children\",\r",
							"                    \"type\": \"array\",\r",
							"                    \"title\": \"The children schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": [],\r",
							"                    \"examples\": [\r",
							"                        [\r",
							"                            [\r",
							"                                \"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\r",
							"                                \"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    ],\r",
							"                    \"additionalItems\": true,\r",
							"                    \"items\": {\r",
							"                        \"$id\": \"#/properties/family/properties/children/items\",\r",
							"                        \"anyOf\": [\r",
							"                            {\r",
							"                                \"$id\": \"#/properties/family/properties/children/items/anyOf/0\",\r",
							"                                \"type\": \"array\",\r",
							"                                \"title\": \"The first anyOf schema\",\r",
							"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                \"default\": [],\r",
							"                                \"examples\": [\r",
							"                                    [\r",
							"                                        \"Alex\",\r",
							"                                        24\r",
							"                                    ]\r",
							"                                ],\r",
							"                                \"additionalItems\": true,\r",
							"                                \"items\": {\r",
							"                                    \"$id\": \"#/properties/family/properties/children/items/anyOf/0/items\",\r",
							"                                    \"anyOf\": [\r",
							"                                        {\r",
							"                                            \"$id\": \"#/properties/family/properties/children/items/anyOf/0/items/anyOf/0\",\r",
							"                                            \"type\": \"string\",\r",
							"                                            \"title\": \"The first anyOf schema\",\r",
							"                                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                            \"default\": \"\",\r",
							"                                            \"examples\": [\r",
							"                                                \"Alex\"\r",
							"                                            ]\r",
							"                                        },\r",
							"                                        {\r",
							"                                            \"$id\": \"#/properties/family/properties/children/items/anyOf/0/items/anyOf/1\",\r",
							"                                            \"type\": \"integer\",\r",
							"                                            \"title\": \"The second anyOf schema\",\r",
							"                                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                            \"default\": 0,\r",
							"                                            \"examples\": [\r",
							"                                                24\r",
							"                                            ]\r",
							"                                        }\r",
							"                                    ]\r",
							"                                }\r",
							"                            },\r",
							"                            {\r",
							"                                \"$id\": \"#/properties/family/properties/children/items/anyOf/1\",\r",
							"                                \"type\": \"array\",\r",
							"                                \"title\": \"The second anyOf schema\",\r",
							"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                \"default\": [],\r",
							"                                \"examples\": [\r",
							"                                    [\r",
							"                                        \"Kate\",\r",
							"                                        12\r",
							"                                    ]\r",
							"                                ],\r",
							"                                \"additionalItems\": true,\r",
							"                                \"items\": {\r",
							"                                    \"$id\": \"#/properties/family/properties/children/items/anyOf/1/items\",\r",
							"                                    \"anyOf\": [\r",
							"                                        {\r",
							"                                            \"$id\": \"#/properties/family/properties/children/items/anyOf/1/items/anyOf/0\",\r",
							"                                            \"type\": \"string\",\r",
							"                                            \"title\": \"The first anyOf schema\",\r",
							"                                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                            \"default\": \"\",\r",
							"                                            \"examples\": [\r",
							"                                                \"Kate\"\r",
							"                                            ]\r",
							"                                        },\r",
							"                                        {\r",
							"                                            \"$id\": \"#/properties/family/properties/children/items/anyOf/1/items/anyOf/1\",\r",
							"                                            \"type\": \"integer\",\r",
							"                                            \"title\": \"The second anyOf schema\",\r",
							"                                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                            \"default\": 0,\r",
							"                                            \"examples\": [\r",
							"                                                12\r",
							"                                            ]\r",
							"                                        }\r",
							"                                    ]\r",
							"                                }\r",
							"                            }\r",
							"                        ]\r",
							"                    }\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"$id\": \"#/properties/family/properties/u_salary_1_5_year\",\r",
							"                    \"type\": \"integer\",\r",
							"                    \"title\": \"The u_salary_1_5_year schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": 0,\r",
							"                    \"examples\": [\r",
							"                        4000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": true\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"$id\": \"#/properties/name\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The name schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"Li\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"$id\": \"#/properties/salary\",\r",
							"            \"type\": \"integer\",\r",
							"            \"title\": \"The salary schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                1000\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true\r",
							"}\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//Проверить что знчение поля name = значению переменной name из окружения.\r",
							"pm.test(\"Check the variable from environment\", () => { \r",
							"    var jsonData = pm.response.json();\r",
							"  pm.expect(pm.environment.get('name')).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"//Проверить что знчение поля age в ответе соответсвует отправленному в запросе значению поля age.\r",
							"pm.test('Age comparison', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    let ageA = pm.request.body.formdata.get(\"age\");\r",
							"    console.log (ageA)\r",
							"    pm.expect(jsonData.age).to.eql(ageA);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "50",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Взять любой объект из присланного списка (js random). В объекте взять Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"var rand = Math.floor (Math.random() * jsonData.length);\r",
							"//console.log (jsonData[i].Cur_ID) \r",
							"console.log (jsonData[rand].Cur_ID);    \r",
							"\r",
							"pm.environment.set(\"curID\", jsonData[rand].Cur_ID);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверка структуры json в ответе. Схема составлена с помощью JSONschema.net.\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"The root schema\",\r",
							"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
							"    \"default\": {},\r",
							"    \"examples\": [\r",
							"        {\r",
							"            \"Cur_Abbreviation\": \"THB\",\r",
							"            \"Cur_ID\": 310,\r",
							"            \"Cur_Name\": \"Батов\",\r",
							"            \"Cur_OfficialRate\": 8.3912,\r",
							"            \"Cur_Scale\": 100,\r",
							"            \"Date\": \"2021-04-18T00:00:00\"\r",
							"        }\r",
							"    ],\r",
							"    \"required\": [\r",
							"        \"Cur_Abbreviation\",\r",
							"        \"Cur_ID\",\r",
							"        \"Cur_Name\",\r",
							"        \"Cur_OfficialRate\",\r",
							"        \"Cur_Scale\",\r",
							"        \"Date\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\r",
							"            \"$id\": \"#/properties/Cur_Abbreviation\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The Cur_Abbreviation schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"THB\"\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_ID\": {\r",
							"            \"$id\": \"#/properties/Cur_ID\",\r",
							"            \"type\": \"integer\",\r",
							"            \"title\": \"The Cur_ID schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                310\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_Name\": {\r",
							"            \"$id\": \"#/properties/Cur_Name\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The Cur_Name schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"Батов\"\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_OfficialRate\": {\r",
							"            \"$id\": \"#/properties/Cur_OfficialRate\",\r",
							"            \"type\": \"number\",\r",
							"            \"title\": \"The Cur_OfficialRate schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0.0,\r",
							"            \"examples\": [\r",
							"                8.3912\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_Scale\": {\r",
							"            \"$id\": \"#/properties/Cur_Scale\",\r",
							"            \"type\": \"integer\",\r",
							"            \"title\": \"The Cur_Scale schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                100\r",
							"            ]\r",
							"        },\r",
							"        \"Date\": {\r",
							"            \"$id\": \"#/properties/Date\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The Date schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"2021-04-18T00:00:00\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "116.203.27.46:5002/curr_byn",
					"host": [
						"116",
						"203",
						"27",
						"46"
					],
					"port": "5002",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency *",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* Задание\r",
							"   1) получить список валют\r",
							"   2) итерировать список валют\r",
							"   3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"   4) если возвращается 500 код, переходим к следующей итреации\r",
							"   5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"   6) если поле есть, пишем в консоль инфу про валюту в виде response\r",
							"{\r",
							"    \"Cur_Abbreviation\": str\r",
							"    \"Cur_ID\": int,\r",
							"    \"Cur_Name\": str,\r",
							"    \"Cur_OfficialRate\": float,\r",
							"    \"Cur_Scale\": int,\r",
							"    \"Date\": str\r",
							"}\r",
							"   7) переходим к следующей итерации */\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"     for (var i = 0; i < jsonData.length; i++) {\r",
							"    \r",
							"        //console.log (jsonData[i].Cur_ID) \r",
							"\r",
							"        var options = {\r",
							"        method: 'POST',\r",
							"        url: '116.203.27.46:5002/curr_byn',\r",
							"        body: {\r",
							"            mode: 'formdata',\r",
							"            formdata: [\r",
							"                {key:'auth_token', value: pm.environment.get('token')},\r",
							"                {key:'curr_code', value: jsonData [i].Cur_ID}\r",
							"                ]\r",
							"            }\r",
							"        };\r",
							"    \r",
							"        \r",
							"        pm.sendRequest(options, function (error, response) {\r",
							"            \r",
							"            pm.test('Cur_OfficialRate', function () {\r",
							"            var jsonData = pm.response.json();\r",
							"            if (response.json().Cur_OfficialRate &&\r",
							"            pm.expect(response).to.have.property ('code', 200)) {\r",
							"                console.log (response.json())}\r",
							"            })\r",
							"            } )\r",
							"    }\r",
							"       "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "116.203.27.46:5002"
		}
	]
}